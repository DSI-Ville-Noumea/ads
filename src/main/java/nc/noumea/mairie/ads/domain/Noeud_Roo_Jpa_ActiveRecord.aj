// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.ads.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.ads.domain.Noeud;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Noeud_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Noeud.entityManager;
    
    public static final EntityManager Noeud.entityManager() {
        EntityManager em = new Noeud().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Noeud.countNoeuds() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Noeud o", Long.class).getSingleResult();
    }
    
    public static List<Noeud> Noeud.findAllNoeuds() {
        return entityManager().createQuery("SELECT o FROM Noeud o", Noeud.class).getResultList();
    }
    
    public static Noeud Noeud.findNoeud(long idNoeud) {
        return entityManager().find(Noeud.class, idNoeud);
    }
    
    public static List<Noeud> Noeud.findNoeudEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Noeud o", Noeud.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Noeud.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Noeud.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Noeud attached = Noeud.findNoeud(this.idNoeud);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Noeud.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Noeud.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Noeud Noeud.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Noeud merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
